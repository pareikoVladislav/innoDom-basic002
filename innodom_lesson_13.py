# -*- coding: utf-8 -*-
"""innoDom_lesson_13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nwEA-4j3On6ekeGIXsYNdANdBL9GI7Ea
"""

import datetime
import csv
import json
import re
from uuid import uuid4


USERS_DATABASE = "users_data.csv"
USERS_CARDS_DATABASE = "users_cards_data.csv"


options = {
    1: "Create account",
    2: "Log-in",
    3: "Add bank card",
    4: "Deposit money into an account",
    5: "Withdrawing money from an account",
    6: "Send money to another user",
    7: "Put money in a saving account",
    8: "Exit",
}



def user_info_writer(file: str, data: list) -> None:
  headers = [
      "id", "user_name", "user_sername",
      "hashed_password", "created_at"
      ]

  with open(file, "a", newline="") as target_file:
    writer = csv.writer(target_file)

    is_empty = target_file.tell() == 0

    if is_empty:
      writer.writerow(headers)

    writer.writerow(data)


def cards_info_writer(file: str, data: list) -> None:
    headers = [
      "id", "user_id", "card_number",
      "card_holder_name", "secure_code",
      "account_bill", "created_at", "updated_at"
      ]

    with open(file, "a", newline="") as target_file:
      writer = csv.writer(target_file)

      is_empty = target_file.tell() == 0

      if is_empty:
        writer.writerow(headers)

      writer.writerow(data)


def generate_unique_id() -> str:
  return str(uuid4())


def check_user_in_database(user_name: str) -> tuple | str:
  if any(char.isdigit() for char in user_name):
    raise ValueError("Name cannot contain digits.")

  with open(USERS_DATABASE, "r", newline="") as users:
    reader = csv.DictReader(users)


    for row in reader:
      if row.get("user_name") == user_name:
        return user_name, row.get("id")

  return ValueError("User not found.")


def check_user_password(username: str, password: str) -> bool | str:
  with open(USERS_DATABASE, "r", newline="") as users:
    reader = csv.DictReader(users)

    for row in reader:
      if username == row.get("user_name") and \
      password == row.get("hashed_password"):
        return True

  raise ValueError("Incorrect password.")


def login_account() -> tuple | str:
  try:
    user_name = check_user_in_database(input("Enter your name: "))[0]

    password = check_user_password(
        user_name,
        str(hash(input("Enter your password: ")))
    )
    print("SUCCESS")
    return user_name, password
  except ValueError as error:
    return str(error)


def password_validator(password: str, password_confirmation: str) -> str:
  if len(password) < 10:
    raise ValueError("Password must be at least 10 characters.")
  elif not re.search(r"(?=.*[A-Z])(?=.*[a-z])", password):
    raise ValueError("Password must contains at least one upper and one lower letter.")
  elif not re.search(r"[!@#$%^&*()]", password):
    raise ValueError("Password must contains at least one special symbol.")
  elif not any(char.isdigit() for char in password):
    raise ValueError("Password must contains at least one digit.")
  elif password != password_confirmation:
    raise ValueError("Passwords do not match.")

  hashed_password = str(hash(password))

  return hashed_password


def user_input_info() -> tuple | str:
  try:
    firs_name = input("Enter your name: ")
    last_name = input("Enter your surname: ")

    if any(char.isdigit() for char in firs_name) or \
      any(char.isdigit() for char in last_name):
      raise ValueError("Name and surname cannot contains digits.")

    password = password_validator(
        input("Enter your password: "),
        input("Confirm your password")
    )

    return firs_name, last_name, password

  except ValueError as error:
    raise ValueError(f"Something wint wrong: {str(error)}")


def create_user() -> str:
  try:
    user_info = user_input_info()
    user_info = list(user_info)
    user_info.insert(0, generate_unique_id())
    user_info.append(datetime.datetime.now())
    user_info_writer(USERS_DATABASE, user_info)
    print("CREATED")
  except ValueError as error:
    return str(error)


def card_number_validator(card_number: str):
  lookup = (0, 2, 4, 6, 8, 1, 3, 5, 7, 9)

  code = "".join(filter(str.isdigit, card_number))
  evens = sum(int(i) for i in code[-1::-2])
  odds = sum(lookup[int(i)] for i in code[-2::-2])
  if (evens + odds) % 10 != 0:
    print("Invalid card number. Please contact your bank.")
  print("SUCCEED")

  return card_number


def get_user_card_number(card_number: str) -> str:
  try:
    if not card_number.isdigit():
      raise ValueError("The card number must contains only digits.")
    elif len(card_number) != 16:
      raise ValueError("The card number must contains 16 characters")

    return card_number

  except ValueError as error:
    return str(error)


def get_card_holder_name(card_holder_name: str) -> str:
  user_name = card_holder_name.strip().split()

  if len(user_name) != 2:
    raise ValueError("The card holder name must contains two words.")
  elif not all(word.isalpha() for word in user_name):
    raise ValueError("The card holder name must contains only letters.")

  return card_holder_name


def user_card_info_input() -> tuple | str:
  try:
    card_number = card_number_validator(
        get_user_card_number(input("Enter your card number: "))
    )

    card_holder_name = get_card_holder_name(
        input("Enter card holder name: ")
    )

    secure_code = generate_unique_id()[0:3]
  except ValueError as error:
    return str(error)

  return card_number, card_holder_name, secure_code


def add_card() -> None | str:
  try:
    user_check = check_user_in_database(input("Enter your name: "))

    if isinstance(user_check, tuple):
      record_id = generate_unique_id()
      user_id = user_check[1]
      card_info = user_card_info_input()

      if isinstance(card_info, str):
        raise ValueError(card_info)

      card_number, card_holder_name, secure_code = card_info
      account_bill = float(0)
      created_at = datetime.datetime.now()
      updated_at = datetime.datetime.now()

      cards_info_writer(USERS_CARDS_DATABASE, [
          record_id, user_id, card_number,
          card_holder_name, secure_code,
          account_bill, created_at, updated_at
      ])
      print("CREATED")
    else:
      raise ValueError("User not found.")
  except ValueError as error:
    return str(error)


def bank():
  user_choise = ""
  menu = json.dumps(options, indent=2)

  while user_choise.lower() != "exit":
    print(menu)
    user_choise = input("Enter operation you needed: ")

    try:
      if user_choise == "1":
        print("-" * 45)
        print("CREATE ACCOUNT")
        create_user()
      elif user_choise == "2":
        print("-" * 45)
        print("LOG-IN")
        result = login_account()
        if isinstance(result, str):
          raise ValueError(result)
      elif user_choise == "3":
        print("-" * 45)
        print("ADDING NEW CARD")
        result = add_card()
        if isinstance(result, str):
          raise ValueError(result)
    except ValueError as error:
      print(str(error))

    except Exception as exception:
      print("An error occured:", str(exception), sep='\n')

# Qwerty123&

bank()